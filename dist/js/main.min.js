const Search = function(){

    function createInput() {
        let select = document.querySelectorAll('.modal-wrapper select')[0],
            input = document.createElement('input');
        input.id = 'search';
        input.placeholder = 'Поиск импульса...';
        select.insertAdjacentHTML('afterEnd', input.outerHTML);

    }
    function search() {
        // Declare letiables
        let input, filter, i, txtValue, div, result;
        input = document.getElementById('search');
        filter = input.value.toUpperCase();
        result = document.getElementById("result");
        div = result.getElementsByTagName('div');

        // Loop through all list items, and hide those who don't match the search query
        for (i = 0; i < div.length; i++) {
            //a = div[i].getElementsByTagName("a")[0];
            txtValue = div[i].textContent || div[i].innerText;
            txtValue = txtValue.split('∟');

            if (txtValue[0].toUpperCase().indexOf(filter) > -1) {
                div[i].style.display = "";
            } else {
                div[i].style.display = "none";
            }
        }
    }

    function listener() {
        let input = document.getElementById('search');
        input.addEventListener('input', search);

    }

    return {
        init: function () {
            createInput();
            listener();
        },
    };
};
class Popup {
    'use strict';
    constructor() {
        this.settings = {
                    button: '#modal',
                    maxWidth: 850,
                    minWidth: 280,
                    className: 'fade-and-drop',
                };
        this.modal = document.createElement('div');
        this.closeButton = document.createElement('button');
        this.overlay = document.createElement("div");
        this.transitionEnd = this.transitionSelect();
    }

    transitionSelect() {
        let el = document.createElement("div");
        if (el.style.WebkitTransition) return "webkitTransitionEnd";
        if (el.style.OTransition) return "oTransitionEnd";
        return 'transitionend';
    }

    extend() {
        for (let i = 1; i < arguments.length; i++) {
            for (let key in arguments[i]) {
                if (arguments[i].hasOwnProperty(key)) {
                    arguments[0][key] = arguments[i][key]
                }
            }
        }
        return arguments[0]
    }

    $(el) {
        return document.querySelectorAll(el)[0];
    }

    close() {
        this.modal.className = this.modal.className.replace(" scotch-open", "");
        this.overlay.className = this.overlay.className.replace(" scotch-open", "");
        this.modal.addEventListener(this.transitionEnd, () => this.modal.parentNode.removeChild(this.modal));
        this.overlay.addEventListener(this.transitionEnd, () => {
            if(this.overlay.parentNode) this.overlay.parentNode.removeChild(this.overlay);
        });
    }

    handlerModel(){
        this.closeButton.addEventListener('click', this.close.call(new Popup()));
        this.overlay.addEventListener('click', this.close.call(new Popup()));
    }

    handlerButton(){
        let button = this.$(this.settings.button);
        button.addEventListener('click', this.open.call(new Popup()));
    }

    buildModel() {
        let contentHolder,
            docFrag;
        docFrag = document.createDocumentFragment();
        this.modal.className = 'scotch-modal ' + this.settings.className;
        this.modal.style.minWidth = this.settings.minWidth + 'px';
        this.modal.style.maxWidth = this.settings.maxWidth + 'px';
        this.closeButton.className = 'scotch-close close-button';
        this.closeButton.innerHTML = '&times;';
        this.modal.appendChild(this.closeButton);
        this.overlay.className = "scotch-overlay " + this.settings.className;
        docFrag.appendChild(this.overlay);
        contentHolder = document.createElement("div");
        contentHolder.className = "scotch-content";
        contentHolder.appendChild(this.createModal());
        this.modal.appendChild(contentHolder);
        docFrag.appendChild(this.modal);
        document.body.appendChild(docFrag);
    }

    open() {
        this.buildModel();
        window.App.search.init();
        this.handlerModel();
        window.getComputedStyle(this.modal).height;
        this.modal.className = this.modal.className + (this.modal.offsetHeight > window.innerHeight ? ' scotch-open scotch-anchored' : ' scotch-open');
        this.overlay.className = this.overlay.className + ' scotch-open';
        window.App.select.createElement();
    }

    createModal() {
        let frag = document.createDocumentFragment();
        let div = document.createElement('div');
        div.className = 'modal-wrapper';
        let h4 = document.createElement('h4');
        h4.innerText = this.settings.title;
        div.appendChild(h4);
        let p = document.createElement('p');
        p.innerHTML = this.settings.content;
        div.appendChild(p);
        let select = document.createElement('select');
        select.disabled = true;
        let option_default = document.createElement('option');
        option_default.innerText = 'Загрузка станций...';
        option_default.value = '0';
        select.appendChild(option_default);
        div.appendChild(select);
        let div_result = document.createElement('div');
        div_result.id = 'result';
        div.appendChild(div_result);
        let checkbox = document.createRange().createContextualFragment('<div class="check"><label class="container">Расширенный вид<input type="checkbox" name="extend" id="extend"><span class="checkmark"></span></label></div>');
        div.appendChild(checkbox);
        frag.appendChild(div);
        return frag;

    }
    
    init(opt){
        this.settings = this.extend({}, this.settings, opt);
        this.handlerButton();
    }
}
const Select = function() {
    const mnemo = [
        '20000',
        '10000',
        '10001',
        '40001',
        '40002',
        '90000',
        '90001',
    ];

    function ajax(opts, callback) {
        let xhr = new XMLHttpRequest();
        xhr.open('GET', opts.url + '?table=' + opts.table + '&param=' + opts.param);
        xhr.send(null);
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
                callback.apply(xhr);
            }
        };
    }

    function setMnemoText(data){
        let new_data = JSON.parse(JSON.stringify(data));
        let length = new_data.length;
        for(let i=0;i<length; i++){
            if(mnemo.includes(new_data[i].mnemo_id)) {
                new_data[i].place = 'Участок';
            } else {
                new_data[i].place = 'Станция';
            }
        }
        console.log(new_data);
        return new_data;
    }

    function handlerCheck(){
        let check = document.querySelectorAll('input[name=extend]')[0];
        let info = document.getElementsByClassName('info');
        check.addEventListener('change', function() {
            if(this.checked) {
                for (let item of info) {
                    item.style.display = 'block';
                }
            } else {
                for (let item of info) {
                    item.style.display = 'none';
                }
            }
        });
    }

    function checked() {
        let el = document.querySelector('input[name=extend]');
        if (el.checked) {
            return 'block';
        } else {
            return 'none';
        }
    }

    function showData(xhr) {
        let data = JSON.parse(this.responseText);
        if(data.hasOwnProperty('error')) {
            alert(data.error);
        }
        data = setMnemoText(data);
        let result = document.querySelectorAll('#result')[0];
        result.innerHTML = '';
        data.forEach(function (item) {
            let div = document.createElement('div');
            let sign = item.dev_desc == '1'?'Нет':'Да';
            div.innerHTML = item.sign + ' - ' + sign;
            div.innerHTML += `<span class="info" style="display: ${checked()};">&angrt; id: ${item.val_id}, ip: ${item.interface}, id_shem: ${item.id_shem}, id_mnemo: ${item.mnemo_id}, signal: ${item.dev_desc}, ${item.place}</span>`;
            if(item.dev_desc == '0') {
                div.className ='alarm';
            }
            if(item.title !== null) {
                div.setAttribute('title', item.title);
            }
            result.appendChild(div);
        });
        handlerCheck();
    }

    function getData(e) {
        let result = document.querySelectorAll('#result')[0];
        result.innerHTML = 'Загрузка импульсов...';
        document.getElementById('search').value = '';
        ajax({
            url: 'php/getData.php',
            table: 'ts',
            param: e.target.value,
        }, showData);
    }

    function getStation (xhr) {
        let data = JSON.parse(this.responseText);
        if(data.hasOwnProperty('error')) {
            alert(data.error);
        }
        let select = document.querySelectorAll('select')[0];
        select.disabled = false;
        select.options[0].text = 'Выберите станцию';
        data.forEach(function (item) {
            let option = document.createElement('option');
            option.value = item.id;
            option.innerText = item.sign;
            select.appendChild(option);
        });
        select.addEventListener('change', getData);
    }

    return {
        createElement: function() {
            ajax({
                url: 'php/getData.php',
                table: 'kp',
                param: '',
            }, getStation);
        }
    }
};


window.App = {};

window.App.select = Select();
window.App.search = Search();

new Popup().init({
    button: '#modal-button',
    title: 'Импульсы ТС',
    content: '<b>Да</b> - есть сигнализация, <b>Нет</b> - нет сигнализации.'
});
